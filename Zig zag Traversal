/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        bool flip=false;
        if(root==nullptr){
            return ans;
        }
        queue<TreeNode*> queueStore;
        queueStore.push(root);
        while(!queueStore.empty()){
            vector<int> levelAns;
            int size= queueStore.size();
            for(int i=0; i<size; i++){
                TreeNode* node= queueStore.front();
                queueStore.pop();
                levelAns.push_back(node->val);
                if(node->left!=nullptr){
                    queueStore.push(node->left);
                }
                if(node->right!=nullptr){
                    queueStore.push(node->right);
                }
            }
            if(flip){
                  levelAns= reverseArray(levelAns);
            }
            flip=!flip;
            ans.push_back(levelAns);
        }
        return ans;
    }
    vector<int> reverseArray(vector<int> &arr){
        int i=0;
        int j=arr.size()-1;
        while(i<=j){
            int temp= arr[i];
            arr[i]= arr[j];
            arr[j]=temp;
            i++;
            j--;
        }
        return arr;
    }
};
