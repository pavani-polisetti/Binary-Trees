/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int height=0;
        if(root==nullptr){
            return height;
        }
        queue<TreeNode*> queueStore;
        queueStore.push(root);
        while(!queueStore.empty()){
            height++;
            int size= queueStore.size();
            for(int i=0; i<size; i++){
                TreeNode* node= queueStore.front();
                queueStore.pop();
                if(node->left!=nullptr){
                    queueStore.push(node->left);
                }
                if(node->right!=nullptr){
                    queueStore.push(node->right);
                }
            }
        }
        return height;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==nullptr){
            return 0;
        }
        int lh=maxDepth(root->left);
        int rh=maxDepth(root->right);
        return 1+max(lh, rh);
    }
};
