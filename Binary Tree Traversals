/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
void preorderTraversal(TreeNode* root, vector<int> &preorder){
    if(root==nullptr){
        return;
    }
    preorder.push_back(root->data);
    preorderTraversal(root->left, preorder);
    preorderTraversal(root->right, preorder);
}
void postorderTraversal(TreeNode* root, vector<int> &postorder){
     if(root==nullptr){
        return;
    }
    postorderTraversal(root->left, postorder);
    postorderTraversal(root->right, postorder);
    postorder.push_back(root->data);
}
void inorderTraversal(TreeNode* root, vector<int> &inorder){
    if (root == nullptr) {
        return;
    }
    inorderTraversal(root->left, inorder);
    inorder.push_back(root->data);
    inorderTraversal(root->right, inorder);
}
vector<vector<int>> getTreeTraversal(TreeNode *root){
    vector<vector<int>> ans;
    vector<int> preorder;
    vector<int> postorder;
    vector<int> inorder;
    preorderTraversal(root, preorder);
    postorderTraversal(root, postorder);
    inorderTraversal(root, inorder);
    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);
    return ans;
}
