/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int, map<int, multiset<int>>> mapStore;
        queue<pair<TreeNode*, pair<int, int>>> queueStore;
        if(root==nullptr){
            return ans;
        }
        queueStore.push({root, {0, 0}});
        while(!queueStore.empty()){
            int size= queueStore.size();
            for(int i=0; i<size; i++){
                pair<TreeNode*, pair<int , int>> currVal= queueStore.front();
                queueStore.pop();
                TreeNode* node= currVal.first;
                int x= currVal.second.first;
                int y= currVal.second.second;
                mapStore[x][y].insert(node->val);
                if(node->left!=nullptr){
                    queueStore.push({node->left, {x-1, y+1}});
                }
                if(node->right!=nullptr){
                    queueStore.push({node->right,{x+1, y+1}});
                }
            }
        }
        for(auto p: mapStore){
            vector<int> col;
            for(auto q: p.second){
                col.insert(col.end(), q.second.begin(), q.second.end());
            }
            ans.push_back(col);
        }
        return ans;
    }
};
