/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root==nullptr){
            return ans;
        }
        levelorderTraversal(root, ans);
        return ans;
    }
    void levelorderTraversal(TreeNode* root, vector<vector<int>> &ans){
        queue<TreeNode*> levelQueue;
        levelQueue.push(root);
        while(!levelQueue.empty()){
            vector<int> levelAns={};
            int size=levelQueue.size();
            for(int i=0; i<size; i++){
                TreeNode* frontNode= levelQueue.front();
                levelQueue.pop();
                levelAns.push_back(frontNode->val);
                if(frontNode->left!=nullptr){
                    levelQueue.push(frontNode->left);
                }
                 if(frontNode->right!=nullptr){
                    levelQueue.push(frontNode->right);
                }
            }
            ans.push_back(levelAns);
        }     
    }
};
