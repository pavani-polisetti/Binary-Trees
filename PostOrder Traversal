/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {        
        vector<int> ans;
        if(root==nullptr){
            return ans;
        }
        postordertraversal(root, ans);
        return ans;
    }
    void postordertraversal(TreeNode* root, vector<int> &arr){
        stack<TreeNode*> stackStore;
        TreeNode* curr=root;
        while(!stackStore.empty() || curr!=nullptr){
            if(curr!=nullptr){
                stackStore.push(curr);
                curr=curr->left;
            }
            else{
                TreeNode* temp= stackStore.top()->right;
                if(temp==nullptr){
                    temp=stackStore.top();
                    stackStore.pop();
                    arr.push_back(temp->val);
                    while(!stackStore.empty() && stackStore.top()->right==temp){
                        temp=stackStore.top();
                        stackStore.pop();
                        arr.push_back(temp->val);
                    }
                }
                else{
                    curr= temp;
                }
            }
    }
    }
};
