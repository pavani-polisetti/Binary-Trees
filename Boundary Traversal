/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

vector<int> ans;
struct node{
    int val;
    node* left;
    node* right;
    node(int val) : val(val), left(nullptr), right(nullptr) {}
};
void leftBoundary(node* root){
    node* leftRoot= root;
    while(leftRoot!=nullptr){
        if(leftRoot->left==nullptr && leftRoot->right==nullptr){
           break; 
        }
        ans.push_back(leftRoot->val);
        if(leftRoot->left!=nullptr){
            leftRoot= leftRoot->left;
        }
        else if(leftRoot->right!=nullptr){
            leftRoot= leftRoot->right;
        }
        if(leftRoot->left==nullptr && leftRoot->right==nullptr){
            break;
        }
    }
}
void leafNodes(node* root){
    node* leafNode= root;
    if(leafNode==nullptr){
        return;
    }
    leafNodes(leafNode->left);
    if(leafNode->left==nullptr && leafNode->right==nullptr){
        ans.push_back(leafNode->val);
    }
    leafNodes(leafNode->right);
    
}
void rightBoundary(node* root){
        node* rightRoot= root;
        stack<int> tempAns;
        while(rightRoot!=nullptr){
            if(rightRoot->left==nullptr && rightRoot->right==nullptr){
                break;
            }
            tempAns.push(rightRoot->val);
            if(rightRoot->right!=nullptr){
                rightRoot= rightRoot->right;
            }
            else if(rightRoot->left!=nullptr){
                rightRoot= rightRoot->left;
            }
            if(rightRoot->left==nullptr && rightRoot->right==nullptr){
                break;
            }
        }
        while(!tempAns.empty()){
            ans.push_back(tempAns.top());
            tempAns.pop();
        }
}
void printAns(){
    for(int i=0; i<ans.size(); i++){
        cout << ans[i]<< " ";
    }
}
int main()
{
    node* root = new node(10);
    root->left = new node(5);
    root->right = new node(20);
    root->left->left = new node(3);
    root->left->right = new node(8);
    root->right->left = new node(18);
    root->right->right = new node(25);
    root->left->right->left=new node(7);
    if(root==nullptr){
        return 0;
    }
    if(root->left==nullptr && root->right==nullptr){
        ans.push_back(root->val);
        printAns();
        return 0;
    }
    ans.push_back(root->val);
    leftBoundary(root->left);
    leafNodes(root);
    rightBoundary(root->right);
    printAns();
}
